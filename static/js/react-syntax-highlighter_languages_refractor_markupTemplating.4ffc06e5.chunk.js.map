{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_markupTemplating.4ffc06e5.chunk.js","mappings":"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","sources":["../../../node_modules/refractor/lang/markup-templating.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases","c","m","f","a","o","p","u","n","r","y","d","l","h","g","v","b","T","e"],"sourceRoot":""}