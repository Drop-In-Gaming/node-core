{"version":3,"file":"static/js/react-syntax-highlighter_languages_refractor_tt2.fc22d8d8.chunk.js","mappings":"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","sources":["../../../node_modules/refractor/lang/markup-templating.js","../../../node_modules/refractor/lang/tt2.js"],"sourcesContent":["'use strict'\n\nmodule.exports = markupTemplating\nmarkupTemplating.displayName = 'markupTemplating'\nmarkupTemplating.aliases = []\nfunction markupTemplating(Prism) {\n  ;(function(Prism) {\n    /**\n     * Returns the placeholder for the given language id and index.\n     *\n     * @param {string} language\n     * @param {string|number} index\n     * @returns {string}\n     */\n    function getPlaceholder(language, index) {\n      return '___' + language.toUpperCase() + index + '___'\n    }\n    Object.defineProperties((Prism.languages['markup-templating'] = {}), {\n      buildPlaceholders: {\n        /**\n         * Tokenize all inline templating expressions matching `placeholderPattern`.\n         *\n         * If `replaceFilter` is provided, only matches of `placeholderPattern` for which `replaceFilter` returns\n         * `true` will be replaced.\n         *\n         * @param {object} env The environment of the `before-tokenize` hook.\n         * @param {string} language The language id.\n         * @param {RegExp} placeholderPattern The matches of this pattern will be replaced by placeholders.\n         * @param {(match: string) => boolean} [replaceFilter]\n         */\n        value: function(env, language, placeholderPattern, replaceFilter) {\n          if (env.language !== language) {\n            return\n          }\n          var tokenStack = (env.tokenStack = [])\n          env.code = env.code.replace(placeholderPattern, function(match) {\n            if (typeof replaceFilter === 'function' && !replaceFilter(match)) {\n              return match\n            }\n            var i = tokenStack.length\n            var placeholder // Check for existing strings\n            while (\n              env.code.indexOf((placeholder = getPlaceholder(language, i))) !==\n              -1\n            )\n              ++i // Create a sparse array\n            tokenStack[i] = match\n            return placeholder\n          }) // Switch the grammar to markup\n          env.grammar = Prism.languages.markup\n        }\n      },\n      tokenizePlaceholders: {\n        /**\n         * Replace placeholders with proper tokens after tokenizing.\n         *\n         * @param {object} env The environment of the `after-tokenize` hook.\n         * @param {string} language The language id.\n         */\n        value: function(env, language) {\n          if (env.language !== language || !env.tokenStack) {\n            return\n          } // Switch the grammar back\n          env.grammar = Prism.languages[language]\n          var j = 0\n          var keys = Object.keys(env.tokenStack)\n          function walkTokens(tokens) {\n            for (var i = 0; i < tokens.length; i++) {\n              // all placeholders are replaced already\n              if (j >= keys.length) {\n                break\n              }\n              var token = tokens[i]\n              if (\n                typeof token === 'string' ||\n                (token.content && typeof token.content === 'string')\n              ) {\n                var k = keys[j]\n                var t = env.tokenStack[k]\n                var s = typeof token === 'string' ? token : token.content\n                var placeholder = getPlaceholder(language, k)\n                var index = s.indexOf(placeholder)\n                if (index > -1) {\n                  ++j\n                  var before = s.substring(0, index)\n                  var middle = new Prism.Token(\n                    language,\n                    Prism.tokenize(t, env.grammar),\n                    'language-' + language,\n                    t\n                  )\n                  var after = s.substring(index + placeholder.length)\n                  var replacement = []\n                  if (before) {\n                    replacement.push.apply(replacement, walkTokens([before]))\n                  }\n                  replacement.push(middle)\n                  if (after) {\n                    replacement.push.apply(replacement, walkTokens([after]))\n                  }\n                  if (typeof token === 'string') {\n                    tokens.splice.apply(tokens, [i, 1].concat(replacement))\n                  } else {\n                    token.content = replacement\n                  }\n                }\n              } else if (\n                token.content\n                /* && typeof token.content !== 'string' */\n              ) {\n                walkTokens(token.content)\n              }\n            }\n            return tokens\n          }\n          walkTokens(env.tokens)\n        }\n      }\n    })\n  })(Prism)\n}\n","'use strict'\nvar refractorMarkupTemplating = require('./markup-templating.js')\nmodule.exports = tt2\ntt2.displayName = 'tt2'\ntt2.aliases = []\nfunction tt2(Prism) {\n  Prism.register(refractorMarkupTemplating)\n  ;(function(Prism) {\n    Prism.languages.tt2 = Prism.languages.extend('clike', {\n      comment: /#.*|\\[%#[\\s\\S]*?%\\]/,\n      keyword: /\\b(?:BLOCK|CALL|CASE|CATCH|CLEAR|DEBUG|DEFAULT|ELSE|ELSIF|END|FILTER|FINAL|FOREACH|GET|IF|IN|INCLUDE|INSERT|LAST|MACRO|META|NEXT|PERL|PROCESS|RAWPERL|RETURN|SET|STOP|TAGS|THROW|TRY|SWITCH|UNLESS|USE|WHILE|WRAPPER)\\b/,\n      punctuation: /[[\\]{},()]/\n    })\n    Prism.languages.insertBefore('tt2', 'number', {\n      operator: /=[>=]?|!=?|<=?|>=?|&&|\\|\\|?|\\b(?:and|or|not)\\b/,\n      variable: {\n        pattern: /[a-z]\\w*(?:\\s*\\.\\s*(?:\\d+|\\$?[a-z]\\w*))*/i\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'keyword', {\n      delimiter: {\n        pattern: /^(?:\\[%|%%)-?|-?%]$/,\n        alias: 'punctuation'\n      }\n    })\n    Prism.languages.insertBefore('tt2', 'string', {\n      'single-quoted-string': {\n        pattern: /'[^\\\\']*(?:\\\\[\\s\\S][^\\\\']*)*'/,\n        greedy: true,\n        alias: 'string'\n      },\n      'double-quoted-string': {\n        pattern: /\"[^\\\\\"]*(?:\\\\[\\s\\S][^\\\\\"]*)*\"/,\n        greedy: true,\n        alias: 'string',\n        inside: {\n          variable: {\n            pattern: /\\$(?:[a-z]\\w*(?:\\.(?:\\d+|\\$?[a-z]\\w*))*)/i\n          }\n        }\n      }\n    }) // The different types of TT2 strings \"replace\" the C-like standard string\n    delete Prism.languages.tt2.string\n    Prism.hooks.add('before-tokenize', function(env) {\n      var tt2Pattern = /\\[%[\\s\\S]+?%\\]/g\n      Prism.languages['markup-templating'].buildPlaceholders(\n        env,\n        'tt2',\n        tt2Pattern\n      )\n    })\n    Prism.hooks.add('after-tokenize', function(env) {\n      Prism.languages['markup-templating'].tokenizePlaceholders(env, 'tt2')\n    })\n  })(Prism)\n}\n"],"names":["markupTemplating","Prism","getPlaceholder","language","index","toUpperCase","Object","defineProperties","languages","buildPlaceholders","value","env","placeholderPattern","replaceFilter","tokenStack","code","replace","match","placeholder","i","length","indexOf","grammar","markup","tokenizePlaceholders","j","keys","walkTokens","tokens","token","content","k","t","s","before","substring","middle","Token","tokenize","after","replacement","push","apply","splice","concat","module","exports","displayName","aliases","refractorMarkupTemplating","require","tt2","register","extend","comment","keyword","punctuation","insertBefore","operator","variable","pattern","delimiter","alias","greedy","inside","string","hooks","add","c","m","f","a","o","p","u","n","r","y","d","l","h","g","v","b","T","e"],"sourceRoot":""}