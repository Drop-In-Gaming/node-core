{"version":3,"file":"index.js","sources":["../dist-src/parse.js"],"sourcesContent":["let objectReferences;\r\nlet parseOptions = {};\r\nexport function parse(input, options = {}) {\r\n    objectReferences = [null];\r\n    parseOptions = options;\r\n    return _parse(input);\r\n}\r\nfunction _parse(input) {\r\n    if (typeof input !== 'string') {\r\n        throw new TypeError('Input must be a string');\r\n    }\r\n    input = input.trim();\r\n    const tokenIdentifier = input.substr(0, 1);\r\n    if (tokenIdentifier in PHPTypes.identifierMap) {\r\n        return PHPTypes.identifierMap[tokenIdentifier].build(input);\r\n    }\r\n    else {\r\n        throw new Error(`Failed to match identifier \"${tokenIdentifier}\".`);\r\n    }\r\n}\r\nexport function toJs(object, options = {}, seen = new WeakMap()) {\r\n    if (!object || typeof object !== 'object')\r\n        return object;\r\n    const objectClass = object.constructor;\r\n    if (!Object.values(PHPTypes.identifierMap).includes(objectClass)) {\r\n        return object;\r\n    }\r\n    if (object instanceof PHPTypes.PHPReference) {\r\n        object = object.value;\r\n    }\r\n    if (seen.has(object)) {\r\n        return seen.get(object);\r\n    }\r\n    const jsValue = objectClass.toJs(object, options);\r\n    seen.set(object, jsValue);\r\n    if (object instanceof PHPTypes.PHPArray || object instanceof PHPTypes.PHPObject) {\r\n        const objectValue = jsValue;\r\n        for (let [key, value] of Object.entries(objectValue)) {\r\n            jsValue[key] = toJs(value, options, seen);\r\n        }\r\n    }\r\n    return jsValue;\r\n}\r\nexport function parseFixedLengthString(input, openingDelimiter = '\"', closingDelimiter = '\"') {\r\n    const byteCountRegex = /(\\d+):/;\r\n    const byteCountMatches = input.match(byteCountRegex);\r\n    if (byteCountMatches !== null) {\r\n        let offset = byteCountMatches[0].length;\r\n        const byteCount = parseInt(byteCountMatches[1]);\r\n        if (input.substr(offset, openingDelimiter.length) === openingDelimiter) {\r\n            offset += openingDelimiter.length;\r\n        }\r\n        else {\r\n            throw new Error('Failed to parse fixed-length string');\r\n        }\r\n        // We need to read bytes manually so the lengths match up with PHP.\r\n        const encoder = new TextEncoder();\r\n        const decoder = new TextDecoder();\r\n        const allBytes = encoder.encode(input.substr(offset));\r\n        const valueBytes = allBytes.slice(0, byteCount);\r\n        const value = decoder.decode(valueBytes);\r\n        offset += value.length;\r\n        if (input.substr(offset, closingDelimiter.length) === closingDelimiter) {\r\n            offset += closingDelimiter.length;\r\n        }\r\n        else {\r\n            if (parseOptions.fixNulls) {\r\n                // Let's see what we can do about this\r\n                // Maybe the nulls have been converted into a replacement character.\r\n                // This is the easiest to fix.\r\n                if (value.substr(0, 1) === '\\ufffd') {\r\n                    input = input.replace(/\\ufffd/g, '\\u0000');\r\n                    return parseFixedLengthString(input, openingDelimiter, closingDelimiter);\r\n                }\r\n                // Maybe the nulls are missing, and we overshot the end of the string.\r\n                let nullCount;\r\n                const valueStart = byteCountMatches[0].length + openingDelimiter.length;\r\n                // Check for lambdas. String should have ended one byte early, and the value should start with \"lambda_\".\r\n                nullCount = 1;\r\n                if (decoder.decode(allBytes.slice(byteCount - nullCount, byteCount - nullCount + closingDelimiter.length + 1)) === closingDelimiter + ';'\r\n                    && /^lambda_\\d+$/.test(value.substr(0, value.length - nullCount))) {\r\n                    input = input.substr(0, valueStart) + '\\u0000' + input.substr(valueStart);\r\n                    let [value] = parseFixedLengthString(input, openingDelimiter, closingDelimiter);\r\n                    return [value, offset - nullCount + closingDelimiter.length]; // Original offset to keep everything matched up\r\n                }\r\n                // Check for protected properties with a leading asterisk. String should have ended two bytes early.\r\n                nullCount = 2;\r\n                if (decoder.decode(allBytes.slice(byteCount - nullCount, byteCount - nullCount + closingDelimiter.length + 1)) === closingDelimiter + ';'\r\n                    && value.substr(0, 1) === '*') {\r\n                    input = input.replace('*', '\\u0000*\\u0000');\r\n                    let [value] = parseFixedLengthString(input, openingDelimiter, closingDelimiter);\r\n                    return [value, offset - nullCount + closingDelimiter.length]; // Original offset to keep everything matched up\r\n                }\r\n                // Check for private properties. String should have ended two bytes early.\r\n                nullCount = 2;\r\n                if (decoder.decode(allBytes.slice(byteCount - nullCount, byteCount - nullCount + closingDelimiter.length + 1)) === closingDelimiter + ';') {\r\n                    // Can't determine the class name from here.\r\n                    // Just prefix with two nulls and check in the toJS method.\r\n                    input = input.substr(0, valueStart) + '\\u0000\\u0000' + input.substr(valueStart);\r\n                    let [value] = parseFixedLengthString(input, openingDelimiter, closingDelimiter);\r\n                    return [value, offset - nullCount + closingDelimiter.length]; // Original offset to keep everything matched up\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse fixed-length string');\r\n            }\r\n        }\r\n        return [value, offset];\r\n    }\r\n    else {\r\n        throw new Error('Failed to parse fixed-length string');\r\n    }\r\n}\r\nexport function makeRegExpClass(regex, valueParser) {\r\n    return class RegExpClass {\r\n        constructor(length, value) {\r\n            this.length = length;\r\n            this.value = value;\r\n            objectReferences.push(this);\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(regex);\r\n            if (matches !== null) {\r\n                const value = valueParser(matches[1]);\r\n                return new this(matches[0].length, value);\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n        toJs() {\r\n            return RegExpClass.toJs(this);\r\n        }\r\n        static toJs(instance) {\r\n            return instance.value;\r\n        }\r\n    };\r\n}\r\nexport var PHPTypes;\r\n(function (PHPTypes) {\r\n    class PHPReference {\r\n        constructor(length, value) {\r\n            this.length = length;\r\n            this.value = value;\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(this.regex);\r\n            if (matches !== null) {\r\n                const value = parseInt(matches[1]);\r\n                if (!(value in objectReferences)) {\r\n                    throw new Error('Invalid Reference');\r\n                }\r\n                const object = objectReferences[value];\r\n                if (object instanceof PHPReference) {\r\n                    throw new Error('Invalid Reference');\r\n                }\r\n                return new this(matches[0].length, object);\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse PHPReference');\r\n            }\r\n        }\r\n        toJs(options = {}) {\r\n            return PHPReference.toJs(this, options);\r\n        }\r\n        static toJs(instance, options = {}) {\r\n            return toJs(instance.value, options);\r\n        }\r\n    }\r\n    PHPReference.regex = /^[Rr]:([^;]+);/;\r\n    PHPTypes.PHPReference = PHPReference;\r\n    class PHPBoolean extends makeRegExpClass(/^b:([01]);/, input => Boolean(parseInt(input))) {\r\n    }\r\n    PHPTypes.PHPBoolean = PHPBoolean;\r\n    class PHPFloat extends makeRegExpClass(/^d:([^;]+);/, input => parseFloat(input.replace('INF', 'Infinity'))) {\r\n    }\r\n    PHPTypes.PHPFloat = PHPFloat;\r\n    class PHPInteger extends makeRegExpClass(/^i:([^;]+);/, input => parseInt(input)) {\r\n    }\r\n    PHPTypes.PHPInteger = PHPInteger;\r\n    class PHPNull extends makeRegExpClass(/^N;/, input => null) {\r\n        constructor() {\r\n            super(2, null);\r\n        }\r\n    }\r\n    PHPTypes.PHPNull = PHPNull;\r\n    class PHPCustomObject {\r\n        constructor(length, value, className) {\r\n            this.length = length;\r\n            this.value = value;\r\n            this.className = className;\r\n            objectReferences.push(this);\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(this.regex);\r\n            if (matches !== null) {\r\n                let offset = matches[0].length;\r\n                const [className, classNameLength] = parseFixedLengthString(input.substr(offset));\r\n                offset += classNameLength;\r\n                if (input.substr(offset, 1) === ':') {\r\n                    offset += 1;\r\n                }\r\n                else {\r\n                    throw new Error('Failed to parse ' + this.name);\r\n                }\r\n                let [value, valueLength] = parseFixedLengthString(input.substr(offset), '{', '}');\r\n                offset += valueLength;\r\n                return new this(offset, value, className);\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n        toJs() {\r\n            return toJs(this);\r\n        }\r\n        static toJs(instance) {\r\n            return instance.value;\r\n        }\r\n    }\r\n    PHPCustomObject.regex = /^C:/;\r\n    PHPTypes.PHPCustomObject = PHPCustomObject;\r\n    class MappedData {\r\n        static parseMap(input, openingDelimiter = '{', closingDelimiter = '}') {\r\n            const countMatches = input.match(this.mapRegex);\r\n            if (countMatches !== null) {\r\n                const count = parseInt(countMatches[1]);\r\n                let offset = countMatches[0].length;\r\n                if (input.substr(offset, openingDelimiter.length) === openingDelimiter) {\r\n                    offset += openingDelimiter.length;\r\n                }\r\n                else {\r\n                    throw new Error('Failed to parse ' + this.name);\r\n                }\r\n                const map = new Map();\r\n                for (let i = 0; i < count; i++) {\r\n                    const key = _parse(input.substr(offset));\r\n                    offset += key.length;\r\n                    // Keys cannot be referenced\r\n                    objectReferences.pop();\r\n                    const value = _parse(input.substr(offset));\r\n                    offset += value.length;\r\n                    map.set(key, value);\r\n                }\r\n                if (input.substr(offset, closingDelimiter.length) === closingDelimiter) {\r\n                    offset += closingDelimiter.length;\r\n                }\r\n                else {\r\n                    throw new Error('Failed to parse ' + this.name);\r\n                }\r\n                return [map, offset];\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n    }\r\n    MappedData.mapRegex = /(\\d+):/;\r\n    PHPTypes.MappedData = MappedData;\r\n    class PHPObject extends MappedData {\r\n        constructor(length, value, className) {\r\n            super();\r\n            this.length = length;\r\n            this.value = value;\r\n            this.className = className;\r\n            this.jsValue = {};\r\n            objectReferences.push(this);\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(this.regex);\r\n            if (matches !== null) {\r\n                let offset = matches[0].length;\r\n                const [className, classNameLength] = parseFixedLengthString(input.substr(offset));\r\n                offset += classNameLength;\r\n                if (input.substr(offset, 1) === ':') {\r\n                    offset += 1;\r\n                }\r\n                else {\r\n                    throw new Error('Failed to parse ' + this.name);\r\n                }\r\n                const instance = new this(offset, new Map(), className);\r\n                const [map, valueLength] = this.parseMap(input.substr(offset));\r\n                offset += valueLength;\r\n                instance.length = offset;\r\n                instance.value = map;\r\n                return instance;\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n        toJs(options = {}) {\r\n            return toJs(this, options);\r\n        }\r\n        static propertyInfo(propertyName, className) {\r\n            let accessModifier = 'public';\r\n            const protectedRegExp = /^\\u0000\\*\\u0000/;\r\n            // Also handle double nulls caused by fixing missing nulls\r\n            const privateRegExp = new RegExp(`^\\u0000(\\u0000${className}|${className}\\u0000)`);\r\n            if (propertyName.charCodeAt(0) === 0) {\r\n                if (protectedRegExp.test(propertyName)) {\r\n                    propertyName = propertyName.replace(protectedRegExp, '');\r\n                    accessModifier = 'protected';\r\n                }\r\n                else if (privateRegExp.test(propertyName)) {\r\n                    propertyName = propertyName.replace(privateRegExp, '');\r\n                    accessModifier = 'private';\r\n                }\r\n            }\r\n            return { accessModifier, propertyName };\r\n        }\r\n        static toJs(instance, options = {}) {\r\n            const optionsHash = JSON.stringify(options);\r\n            const cached = instance.jsValue[optionsHash];\r\n            if (cached) {\r\n                return cached;\r\n            }\r\n            const output = {};\r\n            for (const [PHPKey, PHPValue] of instance.value.entries()) {\r\n                let key = PHPKey.toJs();\r\n                if (typeof key === 'string') {\r\n                    let { accessModifier, propertyName } = this.propertyInfo(key, instance.className);\r\n                    key = propertyName;\r\n                    if (accessModifier !== 'public' && !options.private) {\r\n                        continue;\r\n                    }\r\n                }\r\n                output[key] = PHPValue;\r\n            }\r\n            instance.jsValue[optionsHash] = output;\r\n            return output;\r\n        }\r\n    }\r\n    PHPObject.regex = /^O:/;\r\n    PHPTypes.PHPObject = PHPObject;\r\n    class PHPArray extends MappedData {\r\n        constructor(length, value) {\r\n            super();\r\n            this.length = length;\r\n            this.value = value;\r\n            this.jsValue = {};\r\n            objectReferences.push(this);\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(this.regex);\r\n            if (matches !== null) {\r\n                let offset = matches[0].length;\r\n                const instance = new this(offset, new Map());\r\n                const [map, mapLength] = this.parseMap(input.substr(offset));\r\n                offset += mapLength;\r\n                instance.length = offset;\r\n                instance.value = map;\r\n                return instance;\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n        toJs(options = {}) {\r\n            return toJs(this, options);\r\n        }\r\n        static toJs(instance, options = {}) {\r\n            const optionsHash = JSON.stringify(options);\r\n            const cached = instance.jsValue[optionsHash];\r\n            if (cached) {\r\n                return cached;\r\n            }\r\n            // Borrow the toJs method from PHPObject, then attempt to convert the result to an array.\r\n            const outputObject = PHPObject.toJs(instance, options);\r\n            if (options.detectArrays) {\r\n                const outputArray = [];\r\n                const stringKeys = Object.keys(outputObject);\r\n                const numberKeys = [];\r\n                if (stringKeys.length === 0)\r\n                    return [];\r\n                const allKeysAreNumbers = stringKeys.every(stringKey => {\r\n                    const numberKey = parseInt(stringKey);\r\n                    numberKeys.push(numberKey);\r\n                    return numberKey.toString() === stringKey;\r\n                });\r\n                if (allKeysAreNumbers) {\r\n                    for (const numberKey of numberKeys) {\r\n                        outputArray[numberKey] = outputObject[numberKey];\r\n                    }\r\n                    instance.jsValue[optionsHash] = outputArray;\r\n                    return outputArray;\r\n                }\r\n            }\r\n            instance.jsValue[optionsHash] = outputObject;\r\n            return outputObject;\r\n        }\r\n    }\r\n    PHPArray.regex = /^a:/;\r\n    PHPTypes.PHPArray = PHPArray;\r\n    class PHPString {\r\n        constructor(length, value) {\r\n            this.length = length;\r\n            this.value = value;\r\n            objectReferences.push(this);\r\n        }\r\n        static build(input) {\r\n            const matches = input.match(this.regex);\r\n            if (matches !== null) {\r\n                let offset = matches[0].length;\r\n                let [value, valueLength] = parseFixedLengthString(input.substr(offset));\r\n                offset += valueLength;\r\n                if (input.substr(offset, 1) === ';') {\r\n                    offset += 1;\r\n                }\r\n                else {\r\n                    throw new Error('Failed to parse ' + this.name);\r\n                }\r\n                return new this(offset, value);\r\n            }\r\n            else {\r\n                throw new Error('Failed to parse ' + this.name);\r\n            }\r\n        }\r\n        toJs() {\r\n            return PHPString.toJs(this);\r\n        }\r\n        static toJs(instance) {\r\n            // Remove nulls from lambdas\r\n            if (/^\\u0000lambda_\\d+$/.test(instance.value)) {\r\n                return instance.value.replace(/\\u0000/g, '');\r\n            }\r\n            return instance.value;\r\n        }\r\n    }\r\n    PHPString.regex = /^s:/;\r\n    PHPTypes.PHPString = PHPString;\r\n    function createIdentifierMap(map) {\r\n        return map;\r\n    }\r\n    PHPTypes.identifierMap = createIdentifierMap({\r\n        C: PHPCustomObject,\r\n        N: PHPNull,\r\n        O: PHPObject,\r\n        R: PHPReference,\r\n        S: PHPString,\r\n        a: PHPArray,\r\n        b: PHPBoolean,\r\n        d: PHPFloat,\r\n        i: PHPInteger,\r\n        r: PHPReference,\r\n        s: PHPString,\r\n    });\r\n})(PHPTypes || (PHPTypes = {}));\r\n"],"names":["objectReferences","parseOptions","parse","input","options","_parse","TypeError","trim","tokenIdentifier","substr","PHPTypes","identifierMap","build","Error","toJs","object","seen","WeakMap","objectClass","constructor","Object","values","includes","PHPReference","value","has","get","jsValue","set","PHPArray","PHPObject","objectValue","key","entries","parseFixedLengthString","openingDelimiter","closingDelimiter","byteCountRegex","byteCountMatches","match","offset","length","byteCount","parseInt","encoder","TextEncoder","decoder","TextDecoder","allBytes","encode","valueBytes","slice","decode","fixNulls","replace","nullCount","valueStart","test","makeRegExpClass","regex","valueParser","RegExpClass","push","matches","name","instance","PHPBoolean","Boolean","PHPFloat","parseFloat","PHPInteger","PHPNull","PHPCustomObject","className","classNameLength","valueLength","MappedData","parseMap","countMatches","mapRegex","count","map","Map","i","pop","propertyInfo","propertyName","accessModifier","protectedRegExp","privateRegExp","RegExp","charCodeAt","optionsHash","JSON","stringify","cached","output","PHPKey","PHPValue","private","mapLength","outputObject","detectArrays","outputArray","stringKeys","keys","numberKeys","allKeysAreNumbers","every","stringKey","numberKey","toString","PHPString","createIdentifierMap","C","N","O","R","S","a","b","d","r","s"],"mappings":"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"}