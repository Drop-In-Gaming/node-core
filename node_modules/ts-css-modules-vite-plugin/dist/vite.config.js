"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const plugin_react_1 = __importDefault(require("@vitejs/plugin-react"));
const vite_plugin_svgr_1 = __importDefault(require("vite-plugin-svgr"));
const vite_1 = require("vite");
const vite_plugin_sass_dts_1 = __importDefault(require("vite-plugin-sass-dts"));
const vite_plugin_dts_1 = __importDefault(require("vite-plugin-dts"));
const vite_tsconfig_paths_1 = __importDefault(require("vite-tsconfig-paths"));
const pkg = require("./package.json");
// @ts-ignore
const path_1 = __importDefault(require("path"));
exports.default = (0, vite_1.defineConfig)({
    plugins: [
        (0, plugin_react_1.default)(),
        (0, vite_plugin_svgr_1.default)({
            svgrOptions: {
                exportType: 'named', jsxRuntime: 'automatic'
            }
        }),
        (0, vite_tsconfig_paths_1.default)(),
        (0, vite_plugin_sass_dts_1.default)({
            global: {
                generate: true,
                outFile: path_1.default.resolve("/Users/richardmiles/IdeaProjects/node-core/node_modules/@drop-in-gaming/core", "./src/style.d.ts"),
            },
        }),
        (0, vite_plugin_dts_1.default)({
            insertTypesEntry: true
        }),
    ],
    resolve: {
        alias: [
        /// { find: '@', replacement: path.resolve(__dirname, 'src') },
        ]
    },
    css: {
        preprocessorOptions: {
            scss: {
                importer(...args) {
                    return {
                        file: `${path_1.default.resolve(__dirname, './src')}`
                    };
                }
            }
        },
        modules: {
            localsConvention: 'camelCase'
        }
    },
    build: {
        assetsDir: 'src/assets',
        sourcemap: true,
        minify: false,
        lib: {
            entry: path_1.default.resolve(__dirname, 'src/index.ts'),
            name: '@drop-in-gaming/core',
            formats: ['es', 'umd', 'cjs'],
            fileName: (format) => format === 'es' ? `core.${format}.jsx` : `core.${format}.js`,
        },
        rollupOptions: {
            external: [
                ...Object.keys(pkg.peerDependencies)
            ],
            output: {
                globals: {
                    react: 'React',
                    'react-dom': 'ReactDOM',
                    'styled-components': 'styled',
                    axios: 'axios',
                    'axios-cache-adapter': 'axios-cache-adapter',
                },
                minifyInternalExports: false
            },
        },
    }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS5jb25maWcudHMiLCJzb3VyY2VzIjpbInZpdGUuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0VBQXlDO0FBQ3pDLHdFQUFvQztBQUNwQywrQkFBb0M7QUFDcEMsZ0ZBQTBDO0FBQzFDLHNFQUFrQztBQUNsQyw4RUFBZ0Q7QUFHaEQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFFdEMsYUFBYTtBQUNiLGdEQUF3QjtBQUV4QixrQkFBZSxJQUFBLG1CQUFZLEVBQUM7SUFDeEIsT0FBTyxFQUFFO1FBQ0wsSUFBQSxzQkFBSyxHQUFFO1FBQ1AsSUFBQSwwQkFBSSxFQUFDO1lBQ0QsV0FBVyxFQUFFO2dCQUNULFVBQVUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVc7YUFDL0M7U0FDSixDQUFDO1FBQ0YsSUFBQSw2QkFBYSxHQUFFO1FBQ2YsSUFBQSw4QkFBTyxFQUFDO1lBQ0osTUFBTSxFQUFFO2dCQUNKLFFBQVEsRUFBRSxJQUFJO2dCQUNkLE9BQU8sRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLDhFQUE4RSxFQUFFLGtCQUFrQixDQUFDO2FBQzVIO1NBQ0osQ0FBQztRQUNGLElBQUEseUJBQUcsRUFBQztZQUNBLGdCQUFnQixFQUFFLElBQUk7U0FDekIsQ0FBQztLQUNMO0lBQ0QsT0FBTyxFQUFFO1FBQ0wsS0FBSyxFQUFFO1FBQ0gsK0RBQStEO1NBQ2xFO0tBQ0o7SUFDRCxHQUFHLEVBQUU7UUFDRCxtQkFBbUIsRUFBRTtZQUNqQixJQUFJLEVBQUU7Z0JBQ0YsUUFBUSxDQUFDLEdBQUcsSUFBSTtvQkFDWixPQUFPO3dCQUNILElBQUksRUFBRSxHQUFHLGNBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFO3FCQUM5QyxDQUFDO2dCQUNOLENBQUM7YUFDSjtTQUNKO1FBQ0QsT0FBTyxFQUFFO1lBQ0wsZ0JBQWdCLEVBQUUsV0FBVztTQUNoQztLQUNKO0lBQ0QsS0FBSyxFQUFFO1FBQ0gsU0FBUyxFQUFFLFlBQVk7UUFDdkIsU0FBUyxFQUFFLElBQUk7UUFDZixNQUFNLEVBQUUsS0FBSztRQUNiLEdBQUcsRUFBRTtZQUNELEtBQUssRUFBRSxjQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUM7WUFDOUMsSUFBSSxFQUFFLHNCQUFzQjtZQUM1QixPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQztZQUM3QixRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsTUFBTSxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsTUFBTSxLQUFLO1NBQ3JGO1FBQ0QsYUFBYSxFQUFFO1lBQ1gsUUFBUSxFQUFFO2dCQUNOLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUM7YUFDdkM7WUFDRCxNQUFNLEVBQUU7Z0JBQ0osT0FBTyxFQUFFO29CQUNMLEtBQUssRUFBRSxPQUFPO29CQUNkLFdBQVcsRUFBRSxVQUFVO29CQUN2QixtQkFBbUIsRUFBRSxRQUFRO29CQUM3QixLQUFLLEVBQUUsT0FBTztvQkFDZCxxQkFBcUIsRUFBRSxxQkFBcUI7aUJBQy9DO2dCQUNELHFCQUFxQixFQUFFLEtBQUs7YUFDL0I7U0FDSjtLQUNKO0NBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHJlYWN0IGZyb20gJ0B2aXRlanMvcGx1Z2luLXJlYWN0JztcbmltcG9ydCBzdmdyIGZyb20gJ3ZpdGUtcGx1Z2luLXN2Z3InO1xuaW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XG5pbXBvcnQgc2Fzc0R0cyBmcm9tICd2aXRlLXBsdWdpbi1zYXNzLWR0cydcbmltcG9ydCBkdHMgZnJvbSAndml0ZS1wbHVnaW4tZHRzJztcbmltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gJ3ZpdGUtdHNjb25maWctcGF0aHMnO1xuXG5cbmNvbnN0IHBrZyA9IHJlcXVpcmUoXCIuL3BhY2thZ2UuanNvblwiKTtcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gICAgcGx1Z2luczogW1xuICAgICAgICByZWFjdCgpLFxuICAgICAgICBzdmdyKHtcbiAgICAgICAgICAgIHN2Z3JPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgZXhwb3J0VHlwZTogJ25hbWVkJywganN4UnVudGltZTogJ2F1dG9tYXRpYydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIHRzY29uZmlnUGF0aHMoKSxcbiAgICAgICAgc2Fzc0R0cyh7XG4gICAgICAgICAgICBnbG9iYWw6IHtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvdXRGaWxlOiBwYXRoLnJlc29sdmUoXCIvVXNlcnMvcmljaGFyZG1pbGVzL0lkZWFQcm9qZWN0cy9ub2RlLWNvcmUvbm9kZV9tb2R1bGVzL0Bkcm9wLWluLWdhbWluZy9jb3JlXCIsIFwiLi9zcmMvc3R5bGUuZC50c1wiKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pLFxuICAgICAgICBkdHMoe1xuICAgICAgICAgICAgaW5zZXJ0VHlwZXNFbnRyeTogdHJ1ZVxuICAgICAgICB9KSxcbiAgICBdLFxuICAgIHJlc29sdmU6IHtcbiAgICAgICAgYWxpYXM6IFtcbiAgICAgICAgICAgIC8vLyB7IGZpbmQ6ICdAJywgcmVwbGFjZW1lbnQ6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMnKSB9LFxuICAgICAgICBdXG4gICAgfSxcbiAgICBjc3M6IHtcbiAgICAgICAgcHJlcHJvY2Vzc29yT3B0aW9uczoge1xuICAgICAgICAgICAgc2Nzczoge1xuICAgICAgICAgICAgICAgIGltcG9ydGVyKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGU6IGAke3BhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuL3NyYycpfWBcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG1vZHVsZXM6IHtcbiAgICAgICAgICAgIGxvY2Fsc0NvbnZlbnRpb246ICdjYW1lbENhc2UnXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGJ1aWxkOiB7XG4gICAgICAgIGFzc2V0c0RpcjogJ3NyYy9hc3NldHMnLFxuICAgICAgICBzb3VyY2VtYXA6IHRydWUsXG4gICAgICAgIG1pbmlmeTogZmFsc2UsXG4gICAgICAgIGxpYjoge1xuICAgICAgICAgICAgZW50cnk6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdzcmMvaW5kZXgudHMnKSxcbiAgICAgICAgICAgIG5hbWU6ICdAZHJvcC1pbi1nYW1pbmcvY29yZScsXG4gICAgICAgICAgICBmb3JtYXRzOiBbJ2VzJywgJ3VtZCcsICdjanMnXSxcbiAgICAgICAgICAgIGZpbGVOYW1lOiAoZm9ybWF0KSA9PiBmb3JtYXQgPT09ICdlcycgPyBgY29yZS4ke2Zvcm1hdH0uanN4YCA6IGBjb3JlLiR7Zm9ybWF0fS5qc2AsXG4gICAgICAgIH0sXG4gICAgICAgIHJvbGx1cE9wdGlvbnM6IHtcbiAgICAgICAgICAgIGV4dGVybmFsOiBbXG4gICAgICAgICAgICAgICAgLi4uT2JqZWN0LmtleXMocGtnLnBlZXJEZXBlbmRlbmNpZXMpXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsczoge1xuICAgICAgICAgICAgICAgICAgICByZWFjdDogJ1JlYWN0JyxcbiAgICAgICAgICAgICAgICAgICAgJ3JlYWN0LWRvbSc6ICdSZWFjdERPTScsXG4gICAgICAgICAgICAgICAgICAgICdzdHlsZWQtY29tcG9uZW50cyc6ICdzdHlsZWQnLFxuICAgICAgICAgICAgICAgICAgICBheGlvczogJ2F4aW9zJyxcbiAgICAgICAgICAgICAgICAgICAgJ2F4aW9zLWNhY2hlLWFkYXB0ZXInOiAnYXhpb3MtY2FjaGUtYWRhcHRlcicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtaW5pZnlJbnRlcm5hbEV4cG9ydHM6IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH1cbn0pO1xuIl19